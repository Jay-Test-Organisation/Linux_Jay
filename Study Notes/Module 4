#File Permissions

## 3 types of Permissions

- r - read
- w - write
- x - execute


Each permissions is controlled at three levels 

- u - user -yourself
- g - group 
- o - other -everyone else on the system

## Commands

- ls -l abc  -> to display the file permisions of abc

   Current state -   -rw-r--r--

- chmod a-r abc -> remove read permisisons for all users 

    Current state - --w-------

- chmod u+rw abc  -> Add read and write permissions to abc file 

   Current state - -rw-------

- chmod g+rw abc -> Add read write permissions to abc file for group 

   Current State -  -rw-rw----

- chmod o+r abc -> Add read permissions for others 
   
   Current State - -rw-rw-r--

-----------------------------------------------------------------------------------------------------------


## Using Numberical Mode


so, for chmod ugo+r  -> user, group and others get read permissions

else you can do chmod 444

Execute - 1
Write - 2
Read -  4


Number Permission              Symbol
0      No Permission           ---
1      Execute                 --x
2      Write                   -w-
3      Execute + write         -wx
4      Read                    r--
5      Read + Execute           r-x
6      Read + Write             rw-
7      Read + Write + Execute   rwx




 Password for root account on EC2 instance is ubuntu 
sd

..
ssh -i openssh_linux_jay.pem ubuntu@52.21.135.179




------------------------------------------------------------------------

To open a file, use cat abc

To add a line to a file --> echo "Hi Hello World" > abc
To add an extra line without deleting the above line to the same file  -> echo "World is beautiful" >> abc     ---> if we only use  one > then it replaces the line with the new message 


 
------------------------------------------------------------------------
Input and Output redirect


Standard Input - stdin  -> file descripter 0
Standard Output - stdout -> file descripter 1
Standard Error - stderr -> file descripter 2


If you want to add the output of a command into a file use this way:

For Eg:    ls -l > abc

This creates a file abc with the contents of the output of the command 



To add an eror from a command to a file use this way, as error descriptor is 2 

   ls -l 2> <errorfile>


------------------------------------------------------------------------

Standard output to a file using tee command 






------------------------------------------------------------------------
Tee Command 


uou can use tee command to run a command  and create a file with the output of the same command 

For Eg:  

echo "I am Jay P"  | tee <abc>    --> This will echo the line and also create a file abc with the line saved in it 

For Eg: 
  
  ls -l | tee <abc>



To check how many characters are in a file 

Eg: wc -c <filename>


------------------------------------------------------------------------


Pipe Command- | a Pipe is used to connect the output of one command directly to the input of the command 


command1 [argument1]  | command2 [argument2]


For Eg: 
   ls -l | more   --> more command gives the list of files in one page at a time and you can use space to go to next page and use q to exit 


    ------------------------------------------------------------------------


    File Maintenance Commands 

    cp - copy file 
    rm -  delete file 
    mv  - move file from one location to another
    mkdir - create a new directory
    rmdir - Delete a directory
    chrgrp - change group
    chown - change owner    ---> For Eg: chown -c <user> <filename>



------------------------------------------------------------------------


File Display Commands


cat - open file command 
more - One page at a time of files rather than all of the files showing up in the terminal .
less - shows less files in a page, also can use 'j' to go down one line and 'k' to go up one page
head - to see the first line of files, can also use head -2 to see the first two lines 
tail - last line of the file, can also use tail -2 for last two lines 

------------------------------------------------------------------------


Text  Processor Commands 


*cut
   
   For Eg: cut filename = 
           cut --version
           cut -c1 <filename>  -> Shows first letter of each line in the file 
           cut -c1,2,4 <filename> -> Shows first second and fourth letter of each line together
           cut -c1,3 <filename> -> shows first three letters of each line 



*awk
    Data extractiion command 

   For Eg:  awk --version
            awk '{print $1}' file   ----> Shows all the lines with just the first column/name, we can user $2 to get the second column
            ls -l | awk '{print $1,$3}'   ---------> printing the first and third column of the output from ls - l command 
            ls -l | awk '{print,$NF}'  -----------> print only last column, 
            awk '/jerry/ {print}' file  ------> looks and prints only line which has Jerry in the file 
            echo "Hello Tom" | awk '{$2="Adam"; print $0}'    ------> replaces Tom with Adam
            cat abc |
             


           

*grep and egrep

  grep -global regular expression print / Linux search function/command in a file or and output 


  For Eg:   
  grep --version
  grep --help

  grep Scienfield <filename>  ---> Searches for lines with Scienfield in the file (search word is case senstive)
  grep -c <keyword> <filename> ----> c tells you the count of times the keyword appears in the file
  grep -i <keyboard> <filename> ------> using 'i' makes it non case sensitive, so always use -i
  grep -n <keyword> <filename>  -------> shows the data and the line number where the kayword is found 
  grep -v <keyword> <filename>  -------> all the lines except the keyword in the file
  grep <keyword> <filename> | awk '{print$1}'  ---------> shows only the first column with the keyword , in case there are multiple lines which has the keyword
  ls -l | grep Desktop ------> Searches for 'Desktop' from ls -l output


  egrep is used when we want to look for two words or more words

  egrep -i "<keyword1>|<keyword2>" <filename>




*sort

   For Eg:
    sort scienfeld-characters --> Outputs the contnet of the file in A-Z order
    sort -r scienfeld-characters --> Outputs the contnet of the file inreverse order
    sort -k2 scienfeld-characters --> Put second field as first and then sorts the rest of the data in A-Z order
    ls -l | sort   --> lists the contents of the directory and sorts then in A-Z order





*uniq

     For Eg :

          uniq scienfeld-characters   ----> shows only unique lines (no duplicate lines)
          sort <filename> | uniq  -----> sorts the file and only unique files are shown, no duplicates
          sort <filename> | uniq -c  -----> same as above but shows the count of occurance next to each line, even for duplicates
          sort <filename> | uniq -d   ----> Only show duplicate lines, dont show anything else




*wc 

    wc ----> Stands for Word Count
   For Eg:
      wc <filename>  --->  Shows the number of lines, words and bytes on the file   in this format  a,b,c <filename>
      wc <filename> -l  --> only shows the number of lines in the file
      wc <filename> -c  --> shows the number of bytes in the file 
      ls -l | grep drw | wc -l    -> shows the count of all directories , grep 'drw' means looking for drw in the ls command , drw means directory 



------------------------------------------------------------------------------------------------------------------------

Compare files Command 

diff 

  For Eg:
     diff <file1name> <file2name> ---> its shows whts the diffrent in the data on both files


cmp

   comp <file1name> <file2name> ---> its shows diffrence in bytes size and lines in both files 


------------------------------------------------------------------------------------------------------------------------


Compress and Uncompress files |




tar and gzip
 
     For Eg: 
       tar gvc abc.tar <directorry name or .>   --> tar compresses a little bit and puts everything into one tar file, which is named here called abc.tar
       
       tar xvf abc.tar ---> uncompresses the above file 

        you need to  gzip  to comprtess the tar file further   for eg:    gzip abc.tar ---> created a much more compressed file called abc.tar.gzip

        you can use gzip -d abc.tar.gz to unzip the gzip file 

 
-------------------------------------------------------------------------------------------------------------------------------


Truncate file size

cut down file size 


For Eg: 
     
     truncate -s <new-size> <filename>  -----> Changes the byte size of the file, but this deletes some content of the file


-------------------------------------------------------------------------------------------------------------------------------

Combining and Splitting Files 



For Eg: echo <file1> > <file2>  -> file 2 will have content of file 1
        echo <file3> >> <file2>   --> file 3 will be written on next line keeping the content of file 1

         split -l 2 <file2> <new-file>  ---> this will create a new file with 2 lines from file 2, and another new file with other 2 lines from file 2 etc... 
          


-------------------------------------------------------------------------------------------------------------------------------

Open the terminal as Root user


Sudo -s 


then use exit to come out of sudo terminal 



